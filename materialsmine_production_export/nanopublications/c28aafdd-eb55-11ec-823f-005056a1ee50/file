@prefix ns1: <http://nanomine.org/pub/> .
@prefix ns2: <http://purl.org/dc/terms/> .
@prefix ns3: <http://www.nanopub.org/nschema#> .
@prefix ns4: <http://semanticscience.org/resource/> .
@prefix ns5: <http://www.w3.org/ns/prov#> .
@prefix ns6: <http://www.w3.org/2002/07/owl#> .
@prefix ns7: <http://purl.org/twc/vocab/setl/> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

ns1:NzI4MDAyLjMxMTAxMjY2_pubinfo {
    <http://nanomine.org/nmr/xml/L260_S8_Haggenmueller_2006?format=xml> a ns7:SETLedFile .

    ns1:NzI4MDAyLjMxMTAxMjY2_assertion ns2:created "2021-07-22T20:12:30.788000+00:00"^^xsd:dateTime .
}

{
    ns1:NzI4MDAyLjMxMTAxMjY2 a ns3:Nanopublication ;
        ns4:isAbout <http://nanomine.org/nmr/xml/L260_S8_Haggenmueller_2006?format=xml> ;
        ns3:hasAssertion ns1:NzI4MDAyLjMxMTAxMjY2_assertion ;
        ns3:hasProvenance ns1:NzI4MDAyLjMxMTAxMjY2_provenance ;
        ns3:hasPublicationInfo ns1:NzI4MDAyLjMxMTAxMjY2_pubinfo .

    ns1:NzI4MDAyLjMxMTAxMjY2_assertion a ns3:Assertion .

    ns1:NzI4MDAyLjMxMTAxMjY2_provenance a ns3:Provenance .

    ns1:NzI4MDAyLjMxMTAxMjY2_pubinfo a ns3:PublicationInfo .
}

ns1:NzI4MDAyLjMxMTAxMjY2_assertion {
    <http://nanomine.org/setl/MTg4NDM4LjI1NjYzMjc1OTE4/nanopubs> a <http://rdfs.org/ns/void#Dataset>,
            <http://www.w3.org/ns/dcat#Dataset> ;
        ns5:wasGeneratedBy [ a ns7:JSLDT,
                    ns7:Transform ;
                ns7:hasContext """{
  "owl" : "http://www.w3.org/2002/07/owl#",
  "sio" :     "http://semanticscience.org/resource/",
  "skos" :    "http://www.w3.org/2004/02/skos/core#",
  "dcterms" :    "http://purl.org/dc/terms/",
  "prov" :    "http://www.w3.org/ns/prov#",
  "rdfs" :    "http://www.w3.org/2000/01/rdf-schema#",
  "doi" :    "http://dx.doi.org/",
  "nanomine": "http://nanomine.org/ns/",
  "materialsmine" :    "http://materialsmine.org/ns/",
  "unit" :    "http://materialsmine.org/ns/unit/",
  "author" :    "http://materialsmine.org/author/",
  "publication" :    "http://materialsmine.org/publication/",
  "bibo" : "http://purl.org/ontology/bibo/",
  "authorList" : {"@id" : "bibo:authorList", "@container": "@list"},
  "foaf" : "http://xmlns.com/foaf/0.1/",
  "nanopub" :    "http://www.nanopub.org/nschema#",
  "entry" :    "http://materialsmine.org/entry/",
  "materialsminenp" :    "http://materialsmine.org/nanpub/",
  "sample" :    "http://materialsmine.org/sample/",
  "article" :    "http://materialsmine.org/article/",
  "compound" :    "http://materialsmine.org/compound/",
  "location" :    "http://materialsmine.org/location/",
  "lang" :    "http://materialsmine.org/language/",
  "void" :    "http://rdfs.org/ns/void#",
  "dcat" : "http://www.w3.org/ns/dcat#",
  "pubchem" : "http://rdf.ncbi.nlm.nih.gov/pubchem/compound/CID",
  "dc" :    "http://purl.org/dc/terms/",
  "xsd" : "http://www.w3.org/2001/XMLSchema#"
}""" ;
                ns5:qualifiedUsage [ a ns5:Usage ;
                        ns5:entity <http://nanomine.org/setl/MTg4NDM4LjI1NjYzMjc1OTE4/property_classes_table> ;
                        ns5:hadRole [ ns2:identifier "properties" ] ],
                    [ a ns5:Usage ;
                        ns5:entity <http://nanomine.org/setl/MTg4NDM4LjI1NjYzMjc1OTE4/characterization_methods_table> ;
                        ns5:hadRole [ ns2:identifier "methods" ] ],
                    [ a ns5:Usage ;
                        ns5:entity <http://nanomine.org/setl/MTg4NDM4LjI1NjYzMjc1OTE4/processing_methods_table> ;
                        ns5:hadRole [ ns2:identifier "processing" ] ],
                    [ a ns5:Usage ;
                        ns5:entity <http://nanomine.org/setl/MTg4NDM4LjI1NjYzMjc1OTE4/materials_table> ;
                        ns5:hadRole [ ns2:identifier "materials" ] ],
                    [ a ns5:Usage ;
                        ns5:entity <http://nanomine.org/setl/MTg4NDM4LjI1NjYzMjc1OTE4/units> ;
                        ns5:hadRole [ ns2:identifier "units" ] ],
                    [ a ns5:Usage ;
                        ns5:entity <http://nanomine.org/setl/MTg4NDM4LjI1NjYzMjc1OTE4/microstructure_descriptors_table> ;
                        ns5:hadRole [ ns2:identifier "microstructures" ] ],
                    [ a ns5:Usage ;
                        ns5:entity <http://nanomine.org/setl/MTg4NDM4LjI1NjYzMjc1OTE4/get_uuid> ;
                        ns5:hadRole [ ns2:identifier "get_uuid" ] ] ;
                ns5:used <http://nanomine.org/setl/MTg4NDM4LjI1NjYzMjc1OTE4/xml> ;
                ns5:value """[{
    "@for": "id in row.findall('ID')",
    "@do": {
        "@if": "id.text.replace(' ','') is not None",
        "@id": "materialsminenp:{{id.text.replace(' ','')}}",
        "@graph": [{
            "@id": "materialsminenp:{{id.text.replace(' ','')}}_nanopub",
            "@type": "nanopub:Nanopublication",
            "nanopub:hasAssertion": {
                "@id": "materialsminenp:{{id.text.replace(' ','')}}_assertion",
                "@type": "nanopub:Assertion",
                "@graph": [
                    {
                        "@if": "row.findtext('Control_ID') is not None",
                        "@id": "sample:{{slugify(row.findtext('Control_ID').replace(' ',''))}}",
                        "sio:hasRole": {
                            "@type": "sio:ControlRole",
                            "@id": "sample:{{slugify(row.findtext('Control_ID').replace(' ',''))}}_control_role",
                            "sio:inRelationTo": {
                                "@id": "sample:{{slugify(id.text.replace(' ',''))}}"
                            }
                        }
                    },
                    {
                        "@id": "sample:{{slugify(id.text.replace(' ',''))}}",
                        "@type": [
                            "materialsmine:PolymerNanocomposite"
                        ],
                        "rdfs:label" : "{{row.find('MATERIALS/Filler/FillerComponent/ChemicalName').text}} in {{row.find('MATERIALS/Matrix/MatrixComponent/ChemicalName').text}}"
                    },
                    {
                        "@for": "material in row.findall('MATERIALS')",
                        "@do": {
                            "@id": "sample:{{slugify(id.text.replace(' ',''))}}",
                            "sio:hasComponentPart" : [
                            {
                                "@for": "pi, part in enumerate(material.findall('Filler/FillerComponent'))",
                                "@do": {
                                    "@id": "sample:{{slugify(id.text.replace(' ',''))}}_filler_{{pi}}",
                                    "@type": [{
                                            "@id": "{% if part.find('StdChemicalName') is not none %}compound:{{camelcase(part.find('StdChemicalName').text)}}{% elif part.find('PubChemRef') is not none %}pubchem:{{part.find('PubChemRef').text.replace(' ','')}}{% elif part.find('ChemicalName') is not none %}compound:{{camelcase(part.find('ChemicalName').text)}}{% elif part.find('Abbreviation') is not none %}compound:{{camelcase(part.find('Abbreviation').text)}}{% endif %}",
                                            "@type": "owl:Class",
                                            "rdfs:label": [
                                                {
                                                    "@if" : "part.find('StdChemicalName') is not None",
                                                    "@value" : "{{part.find('StdChemicalName').text}}"
                                                },
                                                {
                                                    "@if" : "part.find('StdChemicalName') is None and part.find('ChemicalName') is not None",
                                                    "@value" : "{{part.find('ChemicalName').text}}"
                                                }
                                            ],
                                            "skos:altLabel" : [
                                                {
                                                    "@if" : "part.find('StdChemicalName') is not None and part.find('ChemicalName') is not None",
                                                    "@value" : "{{part.find('ChemicalName').text}}"
                                                },
                                                {
                                                    "@if" : "part.find('TradeName') is not None",
                                                    "@value" : "{{part.find('TradeName').text}}"
                                                }
                                            ],
                                            "sio:hasAttribute": [
                                                {
                                                    "@if": "part.find('ManufacturerOrSourceName') is not None",
                                                    "@for": "manufacturer in part.findall('ManufacturerOrSourceName')",
                                                    "@do": {
                                                        "@type": "materialsmine:ManufacturerOrSourceName",
                                                        "sio:hasValue": "{{manufacturer.text}}"
                                                    }
                                                }
                                            ],
                                            "skos:notation" : [
                                                {
                                                    "@if" : "part.find('Abbreviation') is not None",
                                                    "@value" : "{{part.find('Abbreviation').text}}"
                                                }
                                            ],
                                            "rdfs:subClassOf" : [
                                                {
                                                    "@if" : "part.find('PubChemRef') is not None",
                                                    "@id" : "pubchem:{{part.find('PubChemRef').text.replace(' ','')}}"
                                                }
                                            ]
                                        }
                                    ],
                                    "sio:hasRole": {
                                        "@type": "materialsmine:Filler",
                                        "sio:inRelationTo": {
                                            "@id": "sample:{{slugify(id.text.replace(' ',''))}}"
                                        }
                                    },
                                    "sio:hasAttribute": [
                                        {
                                            "@for": "fraction in part.findall('../FillerComposition/Fraction/*')",
                                            "@do": {
                                                "@id": "sample:{{slugify(id.text.replace(' ',''))}}_filler_{{pi}}_{{fraction.tag}}_fraction",
                                                "sio:hasValue": {
                                                    "@value": "{{fraction.find('value').text}}",
                                                    "@type": "xsd:double"
                                                },
                                                "dc:description" : [ {
                                                    "@if" : "fraction.find('source') is not None",
                                                    "@value" : "{{fraction.find('source').text}}"
                                                }],
                                                "@type": "materialsmine:{{fraction.tag.title()}}Fraction"
                                            }
                                        },
                                        {
                                            "@for": "density in part.findall('Density')",
                                            "@do": {
                                                "@type": "materialsmine:Density",
                                                "sio:hasValue": {
                                                    "@value": "{{density.find('value').text}}",
                                                    "@type": "xsd:double"
                                                },
                                                "dc:description" : [ {
                                                    "@if" : "density.find('source') is not None",
                                                    "@value" : "{{density.find('source').text}}"
                                                }],
                                                "sio:hasUnit": [
                                                  {
                                                    "@if": "density.find('unit') is not None and density.find('unit').text in units.index",
                                                    "@id": "{{units.loc[density.find('unit').text].uri}}"
                                                  }
                                                ]
                                            }
                                        },
                                        {
                                            "@if": "part.find('SurfaceArea').find('specific') is not None",
                                            "@for": "area in part.findall('SurfaceArea')",
                                            "@do": {
                                                "@type": "materialsmine:SpecificSurfaceArea",
                                                "sio:hasValue": {
                                                    "@value": "{{area.find('.//value').text}}",
                                                    "@type": "xsd:double"
                                                },
                                                "sio:hasUnit": [
                                                    {
                                                      "@if": "area.find('.//unit') is not None and area.find('.//unit').text in units.index",
                                                      "@id": "{{units.loc[area.find('.//unit').text].uri}}"
                                                    }
                                                ],
                                                "sio:hasAttribute": [{
                                                    "@if": "area.find('.//uncertainty')",
                                                    "@type": [
                                                        "sio:UncertaintyValue",
                                                        {
                                                            "@if": "area.find('.//uncertainty/type').text == 'relative'",
                                                            "@id": "sio:Ratio"
                                                        },
                                                        {
                                                            "@if": "area.find('.//uncertainty/type').text == 'absolute'",
                                                            "@id": "sio:StandardDeviation"
                                                        }
                                                    ],
                                                    "sio:hasValue": {
                                                        "@value": "{{area.find('.//uncertainty/value').text}}",
                                                        "@type": "xsd:double"
                                                    }
                                                }]
                                            }
                                        },
                                        {
                                            "@for": "ratio in part.findall('ParticleAspectRatio')",
                                            "@do": {
                                                "@type": "sio:AspectRatio",
                                                "sio:hasValue": {
                                                    "@value": "{{ratio.find('value').text}}",
                                                    "@type": "xsd:double"
                                                },
                                                "sio:hasUnit": [
                                                    {
                                                      "@if": "ratio.find('.//unit') is not None and ratio.find('.//unit').text in units.index",
                                                      "@id": "{{units.loc[ratio.find('.//unit').text].uri}}"
                                                    }
                                                ],
                                                "sio:hasAttribute": [{
                                                    "@if": "ratio.find('.//uncertainty')",
                                                    "@type": [
                                                        "sio:UncertaintyValue",
                                                        {
                                                            "@if": "ratio.find('.//uncertainty/type').text == 'relative'",
                                                            "@id": "sio:Ratio"
                                                        },
                                                        {
                                                            "@if": "ratio.find('.//uncertainty/type').text == 'absolute'",
                                                            "@id": "sio:StandardDeviation"
                                                        }
                                                    ],
                                                    "sio:hasValue": {
                                                        "@value": "{{ratio.find('.//uncertainty/value').text}}",
                                                        "@type": "xsd:double"
                                                    }
                                                }]
                                            }
                                        },
                                        {
                                            "@for": "size in part.findall('SphericalParticleDiameter')",
                                            "@do": {
                                                "@type": "sio:Width",
                                                "sio:hasValue": {
                                                    "@value": "{{size.find('value').text}}",
                                                    "@type": "xsd:double"
                                                },
                                                "sio:hasUnit": [
                                                    {
                                                      "@if": "size.find('.//unit') is not None and size.find('.//unit').text in units.index",
                                                      "@id": "{{units.loc[size.find('.//unit').text].uri}}"
                                                    }
                                                ],
                                                "sio:hasAttribute": [{
                                                    "@if": "size.find('.//uncertainty') is not None",
                                                    "@type": [
                                                        "sio:UncertaintyValue",
                                                        {
                                                            "@if": "size.find('.//uncertainty/type').text == 'relative'",
                                                            "@id": "sio:Ratio"
                                                        },
                                                        {
                                                            "@if": "size.find('.//uncertainty/type').text == 'absolute'",
                                                            "@id": "sio:StandardDeviation"
                                                        }
                                                    ],
                                                    "sio:hasValue": {
                                                        "@value": "{{size.find('.//uncertainty/value').text}}",
                                                        "@type": "xsd:double"
                                                    }
                                                }]
                                            }
                                        },
                                        {
                                            "@for": "phase in part.findall('CrystalPhase')",
                                            "@do": {
                                                "@type": [
                                                    "materialsmine:CrystalPhase",
                                                    {
                                                        "@id": "materialsmine:{{camelcase(phase.text)}}",
                                                        "@type": "owl:Class",
                                                        "rdfs:label": "{{phase.text}}",
                                                        "rdfs:subClassOf": {
                                                            "@id": "materialsmine:CrystalPhase"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "@for": "shape in part.findall('NonSphericalShape')",
                                            "@do": {
                                                "sio:hasAttribute": [{
                                                        "@type": "materialsmine:NonSpherical",
                                                        "@id": "sio:Shape"
                                                    },
                                                    {
                                                        "@if": "shape.find('.//Width') is not None",
                                                        "@type": "sio:Width",
                                                        "dc:Description": [{
                                                            "@if": "shape.find('..//Width/description').text is not None",
                                                            "@value": "{{shape.find('..//Width/description').text}}"
                                                        }],
                                                        "sio:hasValue": {
                                                            "@value": "{{shape.find('.//Width/value').text}}",
                                                            "@type": "xsd:double"
                                                        },
                                                        "sio:hasUnit": [
                                                            {
                                                              "@if": "shape.find('.//Width/unit') is not None and shape.find('.//Width/unit').text in units.index",
                                                              "@id": "{{units.loc[shape.find('.//Width/unit').text].uri}}"
                                                            }
                                                        ],
                                                        "sio:hasAttribute": [{
                                                            "@if": "shape.find('.//Width/uncertainty') is not None",
                                                            "@type": [
                                                                "sio:UncertaintyValue",
                                                                {
                                                                    "@if": "shape.find('.//Width/uncertainty/type').text == 'relative'",
                                                                    "@id": "sio:Ratio"
                                                                },
                                                                {
                                                                    "@if": "shape.find('.//Width/uncertainty/type').text == 'absolute'",
                                                                    "@id": "sio:StandardDeviation"
                                                                }
                                                            ],
                                                            "sio:hasValue": {
                                                                "@value": "{{shape.find('.//Width/uncertainty/value').text}}",
                                                                "@type": "xsd:double"
                                                            }
                                                        }]
                                                    },
                                                    {
                                                        "@if": "shape.find('.//Length') is not None",
                                                        "@type": "sio:Length",
                                                        "dc:Description": [{
                                                            "@if": "shape.find('..//Length/description').text is not None",
                                                            "@value": "{{shape.find('..//Length/description').text}}"
                                                        }],
                                                        "sio:hasValue": {
                                                            "@value": "{{shape.find('.//Length/value').text}}",
                                                            "@type": "xsd:double"
                                                        },
                                                        "sio:hasUnit": [
                                                            {
                                                              "@if": "shape.find('.//Length/unit') is not None and shape.find('.//Length/unit').text in units.index",
                                                              "@id": "{{units.loc[shape.find('.//Length/unit').text].uri}}"
                                                            }
                                                        ],
                                                        "sio:hasAttribute": [{
                                                            "@if": "shape.find('.//Length/uncertainty') is not None",
                                                            "@type": [
                                                                "sio:UncertaintyValue",
                                                                {
                                                                    "@if": "shape.find('.//Length/uncertainty/type').text == 'relative'",
                                                                    "@id": "sio:Ratio"
                                                                },
                                                                {
                                                                    "@if": "shape.find('.//Length/uncertainty/type').text == 'absolute'",
                                                                    "@id": "sio:StandardDeviation"
                                                                }
                                                            ],
                                                            "sio:hasValue": {
                                                                "@value": "{{shape.find('.//Length/uncertainty/value').text}}",
                                                                "@type": "xsd:double"
                                                            }
                                                        }]
                                                    },
                                                    {
                                                        "@if": "shape.find('.//Depth') is not None",
                                                        "@type": "sio:Depth",
                                                        "dc:Description": [{
                                                            "@if": "shape.find('..//Depth/description').text is not None",
                                                            "@value": "{{shape.find('..//Depth/description').text}}"
                                                        }],
                                                        "sio:hasValue": {
                                                            "@value": "{{shape.find('.//Depth/value').text}}",
                                                            "@type": "xsd:double"
                                                        },
                                                        "sio:hasUnit": [
                                                            {
                                                              "@if": "shape.find('.//Depth/unit') is not None and shape.find('.//Depth/unit').text in units.index",
                                                              "@id": "{{units.loc[shape.find('.//Depth/unit').text].uri}}"
                                                            }
                                                        ],
                                                        "sio:hasAttribute": [{
                                                            "@if": "shape.find('.//Depth/uncertainty') is not None",
                                                            "@type": [
                                                                "sio:UncertaintyValue",
                                                                {
                                                                    "@if": "shape.find('.//Depth/uncertainty/type').text == 'relative'",
                                                                    "@id": "sio:Ratio"
                                                                },
                                                                {
                                                                    "@if": "shape.find('.//Depth/uncertainty/type').text == 'absolute'",
                                                                    "@id": "sio:StandardDeviation"
                                                                }
                                                            ],
                                                            "sio:hasValue": {
                                                                "@value": "{{shape.find('.//Depth/uncertainty/value').text}}",
                                                                "@type": "xsd:double"
                                                            }
                                                        }]
                                                    }

                                                ]
                                            }
                                        }
                                    ],
                                    "sio:isSurroundedBy": [{
                                        "@for": "s, surface in enumerate(part.findall('ParticleSurfaceTreatment'))",
                                        "@do": {
                                            "@id": "sample:{{slugify(id.text.replace(' ',''))}}_filler_{{pi}}_surface_{{s}}",
                                            "@type": [{
                                                    "@id": "{% if surface.find('StdChemicalName') is not none %}compound:{{ camelcase(surface.find('StdChemicalName').text)}}{% elif surface.find('PubChemRef') is not none %}pubchem:{{surface.find('PubChemRef').text.replace(' ','')}}{% elif surface.find('ChemicalName') is not none %}compound:{{camelcase(surface.find('ChemicalName').text)}}{% elif surface.find('Abbreviation') is not none %}compound:{{camelcase(surface.find('Abbreviation').text)}}{% endif %}",
                                                    "@type": "owl:Class"
                                                }
                                            ],
                                            "rdfs:label": [
                                                {
                                                    "@if" : "surface.find('StdChemicalName') is not None",
                                                    "@value" : "{{surface.find('StdChemicalName').text}}"
                                                },
                                                {
                                                    "@if" : "surface.find('StdChemicalName') is None and surface.find('ChemicalName') is not None",
                                                    "@value" : "{{surface.find('ChemicalName').text}}"
                                                }
                                            ],
                                            "skos:altLabel" : [
                                                {
                                                    "@if" : "surface.find('StdChemicalName') is not None and surface.find('ChemicalName') is not None",
                                                    "@value" : "{{surface.find('ChemicalName').text}}"
                                                },
                                                {
                                                    "@if" : "surface.find('TradeName') is not None",
                                                    "@value" : "{{surface.find('TradeName').text}}"
                                                }
                                           ],
                                           "skos:notation" : [
                                                {
                                                   "@if" : "surface.find('Abbreviation') is not None",
                                                   "@value" : "{{surface.find('Abbreviation').text}}"
                                                 }
                                            ],
                                            "rdfs:subClassOf" : [
                                                {
                                                    "@if" : "surface.find('PubChemRef') is not None",
                                                    "@id" : "pubchem:{{surface.find('PubChemRef').text.replace(' ','')}}"
                                                 }
                                            ],
                                            "sio:hasAttribute": [
                                                {
                                                    "@if": "surface.find('ManufacturerOrSourceName') is not None",
                                                    "@for": "manufacturer in surface.findall('ManufacturerOrSourceName')",
                                                    "@do": {
                                                        "@type": "materialsmine:ManufacturerOrSourceName",
                                                        "sio:hasValue": "{{manufacturer.text}}"
                                                    }
                                                }
                                            ],
                                            "sio:hasRole": {
                                                "@type": "materialsmine:SurfaceTreatment",
                                                "sio:inRelationTo": {
                                                    "@id": "sample:{{slugify(id.text.replace(' ',''))}}"
                                                }
                                            }
                                        }
                                    }]
                                }
                            },
                            {
                                "@for": "pi, part in enumerate(row.findall('MATERIALS/Matrix/MatrixComponent'))",
                                "@do": {
                                    "@id": "sample:{{slugify(id.text.replace(' ',''))}}_matrix_{{pi}}",
                                    "@type": [{
                                            "@id": "{% if part.find('StdChemicalName') is not none %}compound:{{camelcase(part.find('StdChemicalName').text)}}{% elif part.find('PubChemRef') is not none %}pubchem:{{part.find('PubChemRef').text.replace(' ','')}}{% elif part.find('ChemicalName') is not none %}compound:{{camelcase(part.find('ChemicalName').text)}}{% elif part.find('Abbreviation') is not none %}compound:{{camelcase(part.find('Abbreviation').text)}}{% endif %}",
                                            "@type": "owl:Class",
                                            "rdfs:label": [
                                                {
                                                    "@if" : "part.find('StdChemicalName') is not None",
                                                    "@value" : "{{part.find('StdChemicalName').text}}"
                                                },
                                                {
                                                    "@if" : "part.find('StdChemicalName') is None and part.find('ChemicalName') is not None",
                                                    "@value" : "{{part.find('ChemicalName').text}}"
                                                }
                                            ],
                                            "skos:altLabel" : [
                                                {
                                                    "@if" : "part.find('StdChemicalName') and part.find('ChemicalName')",
                                                    "@value" : "{{part.find('ChemicalName').text}}"
                                                },
                                                {
                                                    "@if" : "part.find('TradeName') is not None",
                                                    "@value" : "{{part.find('TradeName').text}}"
                                                }
                                            ],
                                            "skos:notation" : [
                                                {
                                                    "@if" : "part.find('Abbreviation') is not None",
                                                    "@value" : "{{part.find('Abbreviation').text}}"
                                                }
                                            ],
                                            "rdfs:subClassOf" : [
                                                {
                                                    "@if" : "part.find('PubChemRef') is not None",
                                                    "@id" : "pubchem:{{part.find('PubChemRef').text.replace(' ','')}}"
                                                }
                                            ]
                                        }
                                    ],
                                    "sio:hasRole": {
                                        "@type": "materialsmine:Matrix",
                                        "sio:inRelationTo": {
                                            "@id": "sample:{{slugify(id.text.replace(' ',''))}}"
                                        }
                                    },
                                    "sio:hasAttribute": [
                                    {
                                        "@for": "density in part.findall('Density')",
                                        "@do": {
                                            "@type": "materialsmine:Density",
                                            "sio:hasValue": {
                                                "@value": "{{density.find('value').text}}",
                                                "@type": "xsd:double"
                                            },
                                            "dc:description" : [ {
                                                "@if" : "density.find('source') is not None",
                                                "@value" : "{{density.find('source').text}}"
                                            }],
                                            "sio:hasUnit": [
                                                {
                                                  "@if": "density.find('unit') is not None and density.find('unit').text in units.index",
                                                  "@id": "{{units.loc[density.find('unit').text].uri}}"
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "@if": "part.find('ManufacturerOrSourceName') is not None",
                                        "@for": "manufacturer in part.findall('ManufacturerOrSourceName')",
                                        "@do": {
                                            "@type": "materialsmine:ManufacturerOrSourceName",
                                            "sio:hasValue": "{{manufacturer.text}}"
                                        }
                                    },
                                    {
                                        "@if": "part.find('TradeName') is not None",
                                        "@for": "tradename in part.findall('TradeName')",
                                        "@do":{
                                            "@type": "materialsmine:TradeName",
                                            "sio:hasValue": "{{tradename.text}}"
                                        }
                                    },
                                    {
                                        "@if": "part.find('Abbreviation') is not None",
                                        "@for": "abbrev in part.findall('Abbreviation')",
                                        "@do":{
                                            "@type": "materialsmine:Abbreviation",
                                            "sio:hasValue": "{{abbrev.text}}"
                                        }
                                    }]
                                }
                            }],
"sio:hasAttribute": [
                          {
                            "@for": "i, property in properties.iterrows()",
                            "@do": {
                                "@if": "not isempty(property.xpath) and row.find('PROPERTIES')",
                                "@for": "value in row.find('PROPERTIES').findall('.'+property.xpath)",
                                "@do": [
                                  {
                                    "@if" : "not row.find('PROPERTIES').findall('.'+property.xpath+'/data')",
                                    "@type": "{{property.uri}}",
                                    "dc:description": [{
                                        "@if": "value.find('description') is not None",
                                        "@value": "{{value.find('description').text}}"
                                    }],
                                    "sio:hasValue": [{
                                        "@if": "value.find('value') is not None",
                                        "@value": "{{value.find('value').text}}",
                                        "@type": "xsd:double"
                                    }],
                                    "sio:hasUnit": [
                                        {
                                          "@if": "value.find('unit') is not None and value.find('unit').text in units.index",
                                          "@id": "{{units.loc[value.find('unit').text].uri}}"
                                        }
                                    ],
                                    "sio:hasAttribute": [{
                                        "@for": "uncertainty in value.findall('uncertainty')",
                                        "@do": {
                                            "@type": [
                                                "sio:UncertaintyValue",
                                                {
                                                    "@if": "uncertainty.find('type').text == 'relative'",
                                                    "@id": "sio:Ratio"
                                                },
                                                {
                                                    "@if": "uncertainty.find('type').text == 'absolute'",
                                                    "@id": "sio:StandardDeviation"
                                                }
                                            ],
                                            "sio:hasValue": {
                                                "@value": "{{uncertainty.find('value').text}}",
                                                "@type": "xsd:double"
                                            }
                                        }
                                    }]
                                  },
                                  {
                                      "@for": "table in value.findall('.//data')",
                                      "@do": {
                                          "@for": "row in table.findall('rows/row')",
                                          "@do":
                                                  {
                                                      "@type": [{
                                                              "@if": "not isempty(property.curveDependentVar)",
                                                              "@id": "{{property.curveDependentVar}}"
                                                          },
                                                          {
                                                              "@if": "isempty(property.curveDependentVar) and row.find('../../../AxisLabel/yName') is not None",
                                                              "@id": "materialsmine:{{camelcase(row.find('../../../AxisLabel/yName').text)}}",
                                                              "@type": "owl:Class",
                                                              "rdfs:subClassOf": {
                                                                  "@id": "sio:Quantity"
                                                              },
                                                              "rdfs:label": "{{row.find('../../../AxisLabel/yName').text}}"
                                                          }
                                                      ],
                                                      "sio:hasUnit" : [
                                                          {
                                                            "@if": "row.find('../../../AxisLabel/yUnit') is not None and row.find('../../../AxisLabel/yUnit').text in units.index",
                                                            "@id": "{{units.loc[row.find('../../../AxisLabel/yUnit').text].uri}}"
                                                          }
                                                      ],
                                                      "sio:hasValue": {
                                                          "@value": "{{row.findall('column')[1].text}}",
                                                          "@type": "xsd:double"
                                                      },
                                                      "sio:inRelationTo": [{
                                                          "@type": [{
                                                                  "@if": "not isempty(property.curveIndependentVar)",
                                                                  "@id": "{{property.curveIndependentVar}}"
                                                              },
                                                              {
                                                                  "@if": "isempty(property.curveIndependentVar) and row.find('../../../AxisLabel/xName') is not None",
                                                                  "@id": "materialsmine:{{camelcase(row.find('../../../AxisLabel/xName').text)}}",
                                                                  "@type": "owl:Class",
                                                                  "rdfs:subClassOf": {
                                                                      "@id": "sio:Quantity"
                                                                  },
                                                                  "rdfs:label": "{{row.find('../../../AxisLabel/xName').text}}"
                                                              }
                                                          ],
                                                          "sio:hasUnit" : [
                                                              {
                                                                "@if": "row.find('../../../AxisLabel/xUnit') is not None and row.find('../../../AxisLabel/xUnit').text in units.index",
                                                                "@id": "{{units.loc[row.find('../../../AxisLabel/xUnit').text].uri}}"
                                                              }
                                                          ],
                                                          "sio:hasValue": {
                                                              "@value": "{{row.findall('column')[0].text}}",
                                                              "@type": "xsd:double"
                                                          }
                                                      }]
                                                  }

                                      }
                                  }
                                ]
                              }
                        }]
                        }
                    },
                    {
                        "@for": "microstructure in row.findall('MICROSTRUCTURE')",
                        "@do": {
                            "@id": "sample:{{slugify(id.text.replace(' ',''))}}",
                            "sio:isRepresentedBy" : [
                                {
                                "@for" : "image in microstructure.findall('ImageFile')",
                                "@do" : {
                                    "@if" : "image.find('File') is not None",
                                    "@id" : "{{image.find('File').text.strip()}}",
                                    "@type" : [
                                        "sio:Image",
                                        {
                                             "@if" : "image.find('Type') is not None" ,
                                             "@id" : "materialsmine:{{image.find('Type').text.title()}}Image",
                                             "rdfs:label" : "{{image.find('Type').text.title()}} Image"
                                        }
                                    ],
                                    "foaf:depiction": "{{image.find('File').text.strip()}}",
                                    "prov:wasGeneratedBy" : {
                                        "@type" : [
                                            "materialsmine:Microscopy",
                                            "prov:Activity",
                                            {
                                                "@if" : "image.find('MicroscopyType') is not None",
                                                "@id" : "materialsmine:{{image.find('MicroscopyType').text}}Microscopy",
                                                "rdfs:label" : "{{image.find('MicroscopyType').text}} Microscopy"
                                            }
                                        ],
                                        "prov:used" : {
                                            "@id" : "sample:{{slugify(id.text.replace(' ',''))}}"
                                        }
                                    }
                                }
                            }]
                        }
                    }
                ]
            },
            "nanopub:hasPublicationInfo": {
                "@id": "materialsminenp:{{id.text.replace(' ','')}}_pubinfo",
                "@type": "nanopub:PublicationInfo",
                "@graph": [
                    {
                        "@for": "citation in row.findall('DATA_SOURCE/Citation')",
                        "@do": {
                            "@id": "materialsminenp:{{id.text.replace(' ','')}}_assertion",
                            "prov:generatedAtTime": [{
                                "@if": "citation.find('CommonFields/DateOfCitation')",
                                "@type": "xsd:date",
                                "@value": "{{citation.find('CommonFields/DateOfCitation').text"
                            }],
                            "prov:wasQuotedFrom": [{
                                "@id": "{%if citation.find('CommonFields/DOI') != None %}doi:{{citation.find('CommonFields/DOI').text.replace('<','%3C').replace('>','%3E')}}{%else%}materialsminenp:{{id.text.replace(' ','-')}}{%endif%}",
                                "@type": [
                                    "dcterms:BibliographicResource",
                                    {
                                        "@id": "{{ {'research article':'materialsmine:ResearchArticle','conference proceeding':'materialsmine:ProceedingsArticle','communication':'materialsmine:Communication','review':'materialsmine:ReviewArticle','letter':'bibo:Letter','technical comment':'materialsmine:TechnicalComment'}[citation.find('CommonFields/CitationType').text] }}"
                                    }
                                ],
                                "dcterms:title": "{{citation.find('CommonFields/Title').text}}",
                                "rdfs:label": "{{citation.find('CommonFields/Title').text}}",
                                "rdfs:seeAlso": {
                                    "@if": "citation.find('CommonFields/URL').text",
                                    "@id": "{{citation.find('CommonFields/URL').text.replace('<','%3C').replace('>','%3E')}}"
                                },
                                "dcterms:created": {
                                    "@value": "{{citation.find('CommonFields/PublicationYear').text}}",
                                    "@type": "xsd:integer"
                                },
                                "bibo:volume": {
                                    "@if": "citation.find('CommonFields/Volume').text",
                                    "@value": "{{citation.find('CommonFields/Volume').text}}",
                                    "@type": "xsd:integer"
                                },
                                "dcterms:language": {
                                    "@if": "citation.find('CommonFields/Language').text",
                                    "@id": "lang:{{slugify(citation.find('CommonFields/Language').text)}}",
                                    "@type": "dcterms:LinguisticSystem",
                                    "rdfs:label": "{{citation.find('CommonFields/Language').text}}"
                                },
                                "authorList": [{
                                    "@for": "author in citation.findall('CommonFields/Author')",
                                    "@do": {
                                        "@id": "author:{{slugify(author.text)}}"
                                    }
                                }],
                                "dcterms:creator": [{
                                    "@for": "author in citation.findall('CommonFields/Author')",
                                    "@do": {
                                        "@id": "author:{{slugify(author.text)}}",
                                        "@type": "prov:Agent",
                                        "foaf:name": "{{author.text}}",
                                        "rdfs:label": "{{author.text}}",
                                        "@reverse": {
                                            "prov:wasAttributedTo": {
                                                "@id": "sample:{{slugify(id.text.replace(' ',''))}}"
                                            }
                                        }
                                    }
                                }],
                                "dcterms:isPartOf": {
                                    "@if": "citation.find('CommonFields/Publication').text",
                                    "@id": "publication:{{slugify(citation.find('CommonFields/Publication').text)}}",
                                    "dcterms:title": "{{citation.find('CommonFields/Publication').text}}",
                                    "dcterms:publisher": {
                                        "@if": "citation.find('CommonFields/Publisher').text",
                                        "@id": "publisher:{{slugify(citation.find('CommonFields/Publisher').text)}}",
                                        "rdfs:label": "{{citation.find('CommonFields/Publisher').text}}",
                                        "prov:atLocation": {
                                            "@if": "citation.find('CommonFields/Location').text",
                                            "@type": "dcterms:Location",
                                            "@id": "location:{{slugify(citation.find('CommonFields/Location').text)}}",
                                            "rdfs:label": "{{citation.find('CommonFields/Location').text}}"
                                        }
                                    }
                                },
                                "sio:hasPart": {
                                    "@id": "sample:{{slugify(id.text.replace(' ',''))}}"
                                },
                                "dcat:keyword": [{
                                    "@for": "keyword in citation.findall('CommonFields/Keyword')",
                                    "@do": [{
                                            "@if": "';' in keyword.text",
                                            "@for": "k in re.split('\\\\s*[;]\\\\s*', keyword.text)",
                                            "@do": "{{k.strip().title()}}"
                                        },
                                        {
                                            "@if": "';' not in keyword",
                                            "@value": "{{keyword.text.strip().title()}}"
                                        }
                                    ]
                                }]
                            }]
                        }
                    }
                ]
            },
            "nanopub:hasProvenance": {
                "@id": "materialsminenp:{{id.text.replace(' ','')}}_provenance",
                "@type": "nanopub:Provenance",
                "@graph": [
                    {
                        "@for": "proc in row.findall('PROCESSING')",
                        "@do": {
                            "@for": "i, procedure in processing.iterrows()",
                            "@do": {
                                "@if": "proc.find(procedure.xpath[2:])",
                                "@id": "sample:{{slugify(id.text.replace(' ',''))}}",
                                "prov:wasGeneratedBy": [{
                                    "@id": "entry:{{id.text.replace(' ','')}}_material_{{procedure.label.lower().replace(' ','_')}}_procedure",
                                    "@type" : ["sio:Procedure","{{procedure.uri}}"],
                                    "dc:description": [{
                                        "@if": "proc.find('ExperimentalProcedure').text is not None",
                                        "@value": "{{proc.find('ExperimentalProcedure').text}}"
                                    }],
                                    "sio:hasPart" : [{
                                        "@for": "pn, param in enumerate(proc.findall('.//ChooseParameter'))",
                                        "@do": {
                                            "@for": "i, process in processing.iterrows()",
                                            "@do": {
                                                "@if": "param.find(process.xpath[2:])",
                                                "@type": ["{{process.uri}}"],
                                                "@id" : "sample:{{id.text.replace(' ','')}}_{{procedure.label.lower().replace(' ','_')}}_step_{{pn}}",
                                                "sio:hasOutput" : [{
                                                    "@id": "sample:{{id.text.replace(' ','')}}_{{procedure.label.lower().replace(' ','_')}}_step_{{pn}}_output"
                                                }],
                                                "sio:hasInput": [{
                                                    "@if" : "pn > 0",
                                                    "@id": "sample:{{id.text.replace(' ','')}}_{{procedure.label.lower().replace(' ','_')}}_step_{{pn-1}}_output"
                                                }],
                                                "sio:hasParameter": [
                                                    {
                                                        "@for": "i, parameter in processing.iterrows()",
                                                        "@do": {
                                                            "@if": "not isempty(parameter.xpath) and row.findall('.'+parameter.xpath)",
                                                            "@for": "value in param.findall('.'+parameter.xpath)",
                                                            "@do": [{
                                                                "@id": "sample:{{id.text.replace(' ','')}}_{{procedure.label.lower().replace(' ','_')}}_step_{{pn}}_{{slugify(value.tag)}}",
                                                                "@type": [
                                                                    "sio:Parameter",
                                                                    "{{parameter.uri}}"
                                                                ],
                                                                "dc:description": [{
                                                                    "@if": "value.find('Description')",
                                                                    "@value": "{{value.find('Description').text}}"
                                                                }],
                                                                "sio:hasAttribute" : [{
                                                                    "@for": "i, parameter_attr in processing.iterrows()",
                                                                    "@do": {
                                                                        "@if": "not isempty(parameter_attr.xpath) and row.findall('.'+parameter_attr.xpath)",
                                                                        "@for": "val in value.findall('.'+parameter_attr.xpath)",
                                                                        "@do": [{
                                                                            "@id": "sample:{{id.text.replace(' ','')}}_{{procedure.label.lower().replace(' ','_')}}_step_{{pn}}_{{slugify(value.tag)}}_{{slugify(val.tag)}}",
                                                                            "@type": [
                                                                                "{{parameter_attr.uri}}"
                                                                            ],
                                                                            "dc:description": [{
                                                                                "@if": "val.find('Description')",
                                                                                "@value": "{{val.find('Description').text}}"
                                                                            },
                                                                            {
                                                                                "@if": "val.find('description')",
                                                                                "@value": "{{val.find('description').text}}"
                                                                            }],
                                                                            "sio:hasValue": [{
                                                                                "@if": "val.find('value').text is not None",
                                                                                "@value": "{{val.find('value').text}}"
                                                                            },
                                                                            {
                                                                                "@if": "val.text is not None",
                                                                                "@value": "{{val.text}}"
                                                                            }],
                                                                            "sio:hasUnit": [
                                                                                {
                                                                                  "@if": "val.find('unit') is not None and val.find('unit').text in units.index",
                                                                                  "@id": "{{units.loc[val.find('unit').text].uri}}",
                                                                                  "rdfs:label": "{{val.find('unit').text}}"
                                                                                }
                                                                            ],
                                                                            "sio:hasAttribute": [{
                                                                                "@if": "val.find('.//uncertainty') is not None",
                                                                                "@id": "sample:{{id.text.replace(' ','')}}_{{procedure.label.lower().replace(' ','_')}}_step_{{pn}}_{{slugify(value.tag)}}_{{slugify(val.tag)}}_uncertainty",
                                                                                "@type": [
                                                                                    "sio:UncertaintyValue",
                                                                                    {
                                                                                        "@if": "val.find('.//uncertainty/type').text == 'relative'",
                                                                                        "@id": "sio:Ratio"
                                                                                    },
                                                                                    {
                                                                                        "@if": "val.find('.//uncertainty/type').text == 'absolute'",
                                                                                        "@id": "sio:StandardDeviation"
                                                                                    }
                                                                                ],
                                                                                "sio:hasValue": [{
                                                                                    "@if": "val.find('.//uncertainty/value').text is not None",
                                                                                    "@value": "{{val.find('.//uncertainty/value').text}}"
                                                                                }]
                                                                            }]
                                                                        }]
                                                                    }
                                                                }]
                                                            }]
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    }]
                                }]
                            }
                        }
                    },
                    {
                        "@for": "characterization in row.findall('CHARACTERIZATION')",
                        "@do":
                        {
                            "@id": "materialsminenp:{{id.text.replace(' ','')}}_assertion",
                            "prov:wasGeneratedBy": [{
                                "@for": "i, method in methods.iterrows()",
                                "@do": {
                                    "@if": "not isempty(method.xpath) and characterization.findall('.'+method.xpath)",
                                    "@for": "value in characterization.findall('.'+method.xpath)",
                                    "@do": [{
                                        "@id": "entry:{{id.text.replace(' ','')}}_characterization_{{slugify(value.tag)}}",
                                        "@type": [
                                            "prov:Activity",
                                            "sio:Measuring",
                                            "{{method.uri}}"
                                        ],
                                        "dc:description": [{
                                            "@if": "value.find('Description')",
                                            "@value": "{{value.find('Description').text}}"
                                        }],
                                        "prov:used": [{
                                            "@for": "equipment in list(value.findall('./Equipment')) + list(value.findall('./EquipmentUsed'))",
                                            "@do": {
                                                "@type": [{
                                                        "@id": "materialsmine:{{slugify(equipment.text)}}",
                                                        "@type": "owl:Class",
                                                        "rdfs:subClassOf": {
                                                            "@id": "sio:Device"
                                                        },
                                                        "rdfs:label": "{{equipment.text}}"
                                                    },
                                                    "sio:Device"
                                                ],
                                                "sio:hasAttribute": [{
                                                    "@for": "i, method_attr in methods.iterrows()",
                                                    "@do": {
                                                        "@if": "not isempty('.'+method_attr.xpath) and value.findall('.'+method_attr.xpath)",
                                                        "@id": "sample:{{id.text.replace(' ','')}}_{{method_attr.label.lower().replace(' ','_')}}_attr_{{i}}",
                                                        "@type": "method_attr.uri",
                                                        "sio:hasValue": {
                                                            "@value": "{{value.findall('.'+method_attr.xpath)[0].find('value').text}}",
                                                            "@type": "xsd:double"
                                                        },
                                                        "sio:hasUnit": [
                                                            {
                                                              "@if": "value.findall('.'+method_attr.xpath)[0].find('unit') is not None and value.findall('.'+method_attr.xpath)[0].find('unit').text in units.index",
                                                              "@id": "{{units.loc[value.findall('.'+method_attr.xpath)[0].find('unit').text].uri}}",
                                                              "rdfs:label": "{{value.findall('.'+method_attr.xpath)[0].find('unit').text}}"
                                                            }
                                                        ],
                                                        "sio:hasAttribute": [{
                                                            "@if": "value.findall('.'+method_attr.xpath)[0].find('.//uncertainty') is not None",
                                                            "@id": "sample:{{id.text.replace(' ','')}}_{{method_attr.label.lower().replace(' ','_')}}_attr_uncertainty_{{i}}",
                                                            "@type": [
                                                                "sio:UncertaintyValue",
                                                                {
                                                                    "@if": "value.findall('.'+method_attr.xpath)[0].find('.//uncertainty/type').text == 'relative'",
                                                                    "@id": "sio:Ratio"
                                                                },
                                                                {
                                                                    "@if": "value.findall('.'+method_attr.xpath)[0].find('.//uncertainty/type').text == 'absolute'",
                                                                    "@id": "sio:StandardDeviation"
                                                                }
                                                            ],
                                                            "sio:hasValue": {
                                                                "@value": "{{value.findall('.'+method_attr.xpath)[0].find('.//uncertainty/value').text}}",
                                                                "@type": "xsd:double"
                                                            }
                                                        }]
                                                    }
                                                }]
                                            }
                                        }]
                                    }]
                                }
                            }]
                        }
                    }
                ]
            }
        }]
    }
}]""" ],
            <http://nanomine.org/setl/MTg4NDM4LjI1NjYzMjc1OTE4/MaterialsmineXMLImport> .

    <http://materialsmine.org/setl/xml/MaterialsmineXMLImport> rdfs:label "Materialsmine XML Import SETL Script" ;
        ns7:hasTemplatePrefix "http://materialsmine.org/setl/xml/" ;
        rdfs:subClassOf [ a ns6:Restriction ;
                ns6:onProperty ns5:used ;
                ns6:someValuesFrom <http://nanomine.org/ns/NanomineXMLFile> ],
            ns7:SemanticETLScript .

    <http://nanomine.org/nmr/xml/L260_S8_Haggenmueller_2006?format=xml> a <http://nanomine.org/ns/NanomineXMLFile> .

    <http://nanomine.org/setl/MTg4NDM4LjI1NjYzMjc1OTE4/MaterialsmineXMLImport> a <http://materialsmine.org/setl/xml/MaterialsmineXMLImport>,
            ns7:SemanticETLScript .

    <http://nanomine.org/setl/MTg4NDM4LjI1NjYzMjc1OTE4/characterization_methods_table> a ns7:Table,
            <http://www.w3.org/ns/csvw#Table> ;
        ns5:wasGeneratedBy [ a ns7:Extract ;
                ns5:used <https://docs.google.com/spreadsheets/d/1hDqbUzgJ2menVFhkjAvZs5uWgVoO-lxi7nxOh6W2QiA/export?exportFormat=csv&gid=798992913> ] .

    <http://nanomine.org/setl/MTg4NDM4LjI1NjYzMjc1OTE4/get_uuid> a ns7:PythonScript,
            ns6:Class,
            ns5:SoftwareAgent ;
        rdfs:subClassOf ns5:Activity ;
        ns5:value """
def result():
    from uuid import uuid4
    return uuid4().hex
""" .

    <http://nanomine.org/setl/MTg4NDM4LjI1NjYzMjc1OTE4/materials_table> a ns7:Table,
            <http://www.w3.org/ns/csvw#Table> ;
        ns5:wasGeneratedBy [ a ns7:Extract ;
                ns5:used <https://docs.google.com/spreadsheets/d/1hDqbUzgJ2menVFhkjAvZs5uWgVoO-lxi7nxOh6W2QiA/export?exportFormat=csv&gid=1042381215> ] .

    <http://nanomine.org/setl/MTg4NDM4LjI1NjYzMjc1OTE4/microstructure_descriptors_table> a ns7:Table,
            <http://www.w3.org/ns/csvw#Table> ;
        ns5:wasGeneratedBy [ a ns7:Extract ;
                ns5:used <https://docs.google.com/spreadsheets/d/1hDqbUzgJ2menVFhkjAvZs5uWgVoO-lxi7nxOh6W2QiA/export?exportFormat=csv&gid=1421990030> ] .

    <http://nanomine.org/setl/MTg4NDM4LjI1NjYzMjc1OTE4/processing_methods_table> a ns7:Table,
            <http://www.w3.org/ns/csvw#Table> ;
        ns5:wasGeneratedBy [ a ns7:Extract ;
                ns5:used <https://docs.google.com/spreadsheets/d/1hDqbUzgJ2menVFhkjAvZs5uWgVoO-lxi7nxOh6W2QiA/export?exportFormat=csv&gid=1751784944> ] .

    <http://nanomine.org/setl/MTg4NDM4LjI1NjYzMjc1OTE4/property_classes_table> a ns7:Table,
            <http://www.w3.org/ns/csvw#Table> ;
        ns5:wasGeneratedBy [ a ns7:Extract ;
                ns5:used <https://docs.google.com/spreadsheets/d/1hDqbUzgJ2menVFhkjAvZs5uWgVoO-lxi7nxOh6W2QiA/export?exportFormat=csv&gid=1806836834> ] .

    <http://nanomine.org/setl/MTg4NDM4LjI1NjYzMjc1OTE4/units> a ns7:PythonScript,
            ns6:Class,
            ns5:SoftwareAgent ;
        rdfs:subClassOf ns5:Activity ;
        ns5:qualifiedDerivation [ a ns5:Usage ;
                ns5:entity <http://nanomine.org/setl/MTg4NDM4LjI1NjYzMjc1OTE4/units_table> ;
                ns5:hadRole [ ns2:identifier "units" ] ] ;
        ns5:value """
result = units.set_index(units.code)
""" .

    <http://nanomine.org/setl/MTg4NDM4LjI1NjYzMjc1OTE4/units_table> a ns7:Table,
            <http://www.w3.org/ns/csvw#Table> ;
        ns5:wasGeneratedBy [ a ns7:Extract ;
                ns5:used <https://docs.google.com/spreadsheets/d/1hDqbUzgJ2menVFhkjAvZs5uWgVoO-lxi7nxOh6W2QiA/export?exportFormat=csv&gid=1871720821> ] .

    <http://nanomine.org/setl/MTg4NDM4LjI1NjYzMjc1OTE4/xml> a ns7:XML ;
        ns5:wasGeneratedBy [ a ns7:Extract ;
                ns5:used <http://nanomine.org/nmr/xml/L260_S8_Haggenmueller_2006?format=xml> ] .
}

ns1:NzI4MDAyLjMxMTAxMjY2_provenance {
    ns1:NzI4MDAyLjMxMTAxMjY2_assertion ns5:wasDerivedFrom ns1:NjgyMjE2LjI1NDM3MTM3MTc_assertion,
            <urn:4ziugKnTdjps4VTgebb5Q4_assertion> ;
        ns5:wasGeneratedBy [ a ns7:Planner ] .
}

